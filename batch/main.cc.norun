#include "./CORE/CMS3.h"
#include "./CORE/SSSelections.h"
#include "TTree.h"
#include "TFile.h"
#include "helper_babymaker.h"
#include "base.h"
#include "CORE/Tools/goodrun.h"
#include "CORE/Tools/JetCorrector.h"
#include "CORE/Tools/jetcorr/JetCorrectionUncertainty.h"  
#include "CORE/Tools/jetcorr/SimpleJetCorrectionUncertainty.h"

int main(int argc, char *argv[]){

  int which_in = 0;
  int file = 2;

  if (argc > 2) {
     which_in = atoi(argv[1]);
     file     = atoi(argv[2]);
  } 
  else { 
    cout << "not enough arguments!" << endl;  
    return 0;
  }


  sample_t which = static_cast<sample_t>(which_in);

  babyMaker *mylooper = new babyMaker();

  //Path, filename, suffix
  string path = "/store/group/snt/run2_25ns_MiniAODv2/";
  string name = ""; 
  string shortname = ""; 
  const char* filename = Form("merged_ntuple_%i.root", file);
  const char* suffix = file < 0 ? "" : Form("_%i", file);
  string tag = "V07-04-08";
  bool isData = false;
  bool isSignal = false; 

  //Info for each sample
  switch (which){
    case TTBAR:
      name="TTJets_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      shortname="ttbar";
      tag = "V07-04-11";
      break;
    case TTW:
      name="TTWJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-madspin-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag = "V07-04-11";
      shortname="ttw";
      break;
    case TTZL:
      name="TTZToLLNuNu_M-10_TuneCUETP8M1_13TeV-amcatnlo-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v2";
      tag = "V07-04-11";
      shortname="ttzl";
      break;
    case WZ:
      name="WZTo3LNu_TuneCUETP8M1_13TeV-powheg-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      shortname="wz";
      tag="V07-04-11";
      break;
    case DY_low:
      name="DYJetsToLL_M-5to50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag = "V07-04-11";
      shortname="dy_low";
      break;
    case DY_high:
      name="DYJetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1"; 
      tag = "V07-04-11";
      shortname="dy_high";
      break;
    case WJets:
      name="WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag = "V07-04-11";
      shortname="wjets";
      break;
    case TTZQ:
      name="TTZToQQ_TuneCUETP8M1_13TeV-amcatnlo-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag = "V07-04-11";
      shortname="ttzq";
      break;
    case TTWQQ:
      name="TTWJetsToQQ_TuneCUETP8M1_13TeV-amcatnloFXFX-madspin-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag = "V07-04-11";
      shortname="ttwqq";
      break;
    case TTG: 
      name="TTGJets_TuneCUETP8M1_13TeV-amcatnloFXFX-madspin-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      shortname="ttg";
      tag="V07-04-11";
      break;
    case SINGLETOP1:
      name="ST_s-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      shortname="singletop1";
      tag = "V07-04-11";
      break;
    case SINGLETOP2:
      name="ST_t-channel_top_4f_leptonDecays_13TeV-powheg-pythia8_TuneCUETP8M1_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag = "V07-04-11";
      shortname="singletop2";
      break;
    case SINGLETOP3:
      name="ST_t-channel_antitop_4f_leptonDecays_13TeV-powheg-pythia8_TuneCUETP8M1_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag = "V07-04-11";
      shortname="singletop3";
      break;
    case SINGLETOP4:
      name="ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v2";
      tag = "V07-04-11";
      shortname="singletop4";
      break;
    case SINGLETOP5:
      name="ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag = "V07-04-11";
      shortname="singletop5";
      break;
    case QQWW:    
      name="WpWpJJ_EWK-QCD_TuneCUETP8M1_13TeV-madgraph-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="qqww";
      break;
    case TTTT:
      name="TTTT_TuneCUETP8M1_13TeV-amcatnlo-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="tttt";
      break;
    case WWDPS:
      name="WW_DoubleScattering_13TeV-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="wwdps";
      break;
    case TTBAR_PH: 
      name="TT_TuneCUETP8M1_13TeV-powheg-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1"; 
      shortname="ttbar_ph";
      tag="V07-04-11";
      break;
    case WJets_LO:
      name="WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      shortname="wjets_lo";
      tag="V07-04-11";
      break;
    case WWZ:
      name="WWZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="wwz";
      break;
    case ZZ:
      name="ZZTo4L_13TeV_powheg_pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v2";
      tag="V07-04-11";
      shortname="zz"; 
      break;
    case TG:   
      name="TGJets_TuneCUETP8M1_13TeV_amcatnlo_madspin_pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="tg";
      break;
    case ZG:
      name="ZGTo2LG_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="zg";
      break;
    case WZZ:
      name="WZZ_TuneCUETP8M1_13TeV-amcatnlo-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="wzz";
      break;
    case WGToLNuG: 
      name="WGToLNuG_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      shortname="wgtolnug";
      tag="V07-04-11";
      break;
    case TZQ:
      name="tZq_ll_4f_13TeV-amcatnlo-pythia8_TuneCUETP8M1_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="tzq";
      break;
    case TTHtoNonBB:
      name="ttHJetToNonbb_M125_13TeV_amcatnloFXFX_madspin_pythia8_mWCutfix_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="tthtononbb";
      break;
    case VHtoNonBB:
      name="VHToNonbb_M125_13TeV_amcatnloFXFX_madspin_pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="vhtononbb";
      break;
    case TTZlow:
      name="TTZ_lowMM_petrucc";
      tag="V07-04-11";
      path="/store/group/snt/run2_25ns_privateMiniAOD";
      shortname="ttzlow"; 
      break;
    case GGHtoZZto4L:
      name="GluGluHToZZTo4L_M125_13TeV_powheg_JHUgen_pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="gghtozzto4l";
      break;
    case WZMG:
      name="WZJets_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="wzmg";
      break;
    case T1TTTT_1500:
      name="SMS-T1tttt_mGluino-1500_mLSP-100_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      shortname="t1tttt_1500";
      tag="V07-04-11";
      break;
    case T1TTTT_1200:  
      name="SMS-T1tttt_mGluino-1200_mLSP-800_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-11";
      shortname="t1tttt_1200";
      break;
    case T5QQQQWWDeg_1000_315_300: 
      name="T5qqqqWWDeg_mGo1000_mCh315_mChi300_dilep";
      tag="";
      path="/nfs-7/userdata/ss2015/signalSamples/V07-04-08/";
      shortname="t5qqqqwwdeg_1000_315_300";
      break;
    case T5QQQQWW_1200_1000_800:
      name="T5qqqqWW_mGo1200_mCh1000_mChi800_dilep";
      path="/nfs-7/userdata/ss2015/signalSamples/V07-04-08/";
      tag="";
      shortname="t5qqqqww_1200_1000_800";
      break;
    case T5ttttDeg_1000_300_285_280:
      name="T5ttttDeg_mGo1000_mStop300_mCh285_mChi280_23bodydec";
      path="/nfs-7/userdata/ss2015/signalSamples/V07-04-08/";
      shortname="t5ttttdeg_1000_300_285_280";
      tag="";
      break;
    case T6TTWW_600_425_50:
      name="T6ttWW_600_425_50";
      path="/nfs-7/userdata/ss2015/signalSamples/V07-04-08/";
      tag="";
      shortname="t6ttww_600_425_50";
      break;
    case T6TTWW_650_150_50:
      name="T6ttWW_650_150_50";
      path="/nfs-7/userdata/ss2015/signalSamples/V07-04-08/";
      shortname="t6ttww_650_150_50";
      tag="";
      break;

    //Data
    case DataDoubleEGC_05oct:
      shortname="datadoubleegc_05oct";
      name="Run2015C_25ns_DoubleEG_MINIAOD_05Oct2015-v1/merged";
      isData = true;
      path="/store/group/snt/run2_data";
      tag="V07-04-11";
      break;
    case DataDoubleMuonC_05oct:
      name="Run2015C_25ns_DoubleMuon_MINIAOD_05Oct2015-v1/merged";
      shortname="datadoublemuonc_05oct";
      isData = true;
      path="/store/group/snt/run2_data";
      tag="V07-04-11";
      break;
    case DataMuonEGC_05oct:
      shortname="datamuonegc_05oct";
      name="Run2015C_25ns_MuonEG_MINIAOD_05Oct2015-v1/merged";
      path="/store/group/snt/run2_data";
      isData = true;
      tag="V07-04-11";
      break;
    case DataDoubleEGD_05oct:
      shortname="datadoubleegd_05oct";
      name="Run2015D_DoubleEG_MINIAOD_05Oct2015-v1/merged";
      isData = true;
      path="/store/group/snt/run2_data";
      tag="V07-04-11";
      break;
    case DataDoubleMuonD_05oct:
      name="Run2015D_DoubleMuon_MINIAOD_05Oct2015-v1/merged";
      shortname="datadoublemuond_05oct";
      isData = true;
      path="/store/group/snt/run2_data";
      tag="V07-04-11";
      break;
    case DataMuonEGD_05oct:
      shortname="datamuonegd_05oct";
      name="Run2015D_MuonEG_MINIAOD_05Oct2015-v2/merged";
      path="/store/group/snt/run2_data";
      isData = true;
      tag="V07-04-11";
      break;
    case DataDoubleEGD_v4:
      shortname="datadoubleegd_v4";
      name="Run2015D_DoubleEG_MINIAOD_PromptReco-v4/merged";
      isData = true;
      path="/store/group/snt/run2_data";
      tag="V07-04-11";
      break;
    case DataDoubleMuonD_v4:
      name="Run2015D_DoubleMuon_MINIAOD_PromptReco-v4/merged";
      shortname="datadoublemuond_v4";
      isData = true;
      path="/store/group/snt/run2_data";
      tag="V07-04-11";
      break;
    case DataMuonEGD_v4:
      shortname="datamuonegd_v4";
      name="Run2015D_MuonEG_MINIAOD_PromptReco-v4/merged";
      path="/store/group/snt/run2_data";
      isData = true;
      tag="V07-04-11";
      break;

    case T1TTTT_1950_700to950:
      shortname="t1tttt_1950_700to950";
      name="SMS-T1tttt_mGluino-1950_mLSP-700to950_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal = true;
      break;
    case T1TTTT_1100_1to775:
      shortname="t1tttt_1100_1to775";
      name="SMS-T1tttt_mGluino-1100_mLSP-1to775_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal=1;
      break;
    case T1TTTT_1175_950:
      shortname="t1tttt_1175_950";
      name="SMS-T1tttt_mGluino-1175_mLSP-950_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal=1;
      break;
    case T1TTTT_1275_900to975:
      shortname="t1tttt_1275_900to975";
      name="SMS-T1tttt_mGluino-1275_mLSP-900to975_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal=1;
      break;
    case T1TTTT_1300_1to1075:
      shortname="t1tttt_1300_1to1075";
      name="SMS-T1tttt_mGluino-1300_mLSP-1to1075_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal=1;
      break;
    case T1TTTT_1300to1325_700to1100:
      shortname="t1tttt_1300to1325_700to1100";
      name="SMS-T1tttt_mGluino-1300to1325_mLSP-700to1100_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal=1;
      break;
    case T1TTTT_1350to1375_50to1025:
      shortname="t1tttt_1350to1375_50to1025";
      name="SMS-T1tttt_mGluino-1350to1375_mLSP-50to1025_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal=1;
      break;
    case T1TTTT_1500to1525_50to1125:
      shortname="t1tttt_1500to1525_50to1125";
      name="SMS-T1tttt_mGluino-1500to1525_mLSP-50to1125_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal=1;
      break;
    case T1TTTT_1800to1850_1to1450:
      shortname="t1tttt_1800to1850_1to1450";
      name="SMS-T1tttt_mGluino-1800to1850_mLSP-1to1450_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal=1;
      break;
  case T1TTTT_1950_700to950:
      shortname="t1tttt_1950_700to950";
      name="SMS-T1tttt_mGluino-1950_mLSP-700to950_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
      tag="V07-04-12";
      isSignal=1;
      break;
  case T1TTTT_625_275to375:
    shortname="t1tttt_625_275to375";
    name="SMS-T1tttt_mGluino-625_mLSP-275to375_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
    tag="V07-04-12";
    isSignal=1;
    break;
  case T1TTTT_625to650_200to400:
    shortname="t1tttt_625to650_200to400";
    name="SMS-T1tttt_mGluino-625to650_mLSP-200to400_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
    tag="V07-04-12";
    isSignal=1;
    break;
  case T1TTTT_650to675_250to425:
    shortname="t1tttt_650to675_250to425";
    name="SMS-T1tttt_mGluino-650to675_mLSP-250to425_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
    tag="V07-04-12";
    isSignal=1;
    break;
  case T1TTTT_700to750_200to500:
    shortname="t1tttt_700to750_200to500";
    name="SMS-T1tttt_mGluino-700to750_mLSP-200to500_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_RunIISpring15MiniAODv2-FastAsympt25ns_74X_mcRun2_asymptotic_v2-v1";
    tag="V07-04-12";
    isSignal=1;
    break;

  default:
    name="dummy";
    path = "/store/group/snt/run2_25ns/";
    break;

  }

  //Path for signal
  if (isSignal == true) path="/store/group/snt/run2_fastsim"; 
  
  //Set up file and tree
  cout << "Using xrootd " << endl;
  mylooper->MakeBabyNtuple(Form("%s%s", shortname.c_str(), suffix));
  TFile *f;
  if (path.find("nfs") < path.length()) f = TFile::Open(Form("%s/%s/%s/%s", path.c_str(), name.c_str(), tag.c_str(), filename)); 
  else f = TFile::Open(Form("root://cmsxrootd.fnal.gov//%s/%s/%s/%s", path.c_str(), name.c_str(), tag.c_str(), filename)); 
  cout << "File opened...." << endl;
  TTree *tree = (TTree*)f->Get("Events");
  cms3.Init(tree);

  //Event Counting
  unsigned int nEvents = tree->GetEntries();
  unsigned int nEventsTotal = 0;
  cout << "nEvents: " << tree->GetEntries() << endl;

  //Add good run list
  set_goodrun_file("final2015_golden_25ns2p11fb.txt");

  //Make Jet Energy Uncertainties
  JetCorrectionUncertainty *jecUnc = 0;
  if ( isData) jecUnc = new JetCorrectionUncertainty("CORE/Tools/jetcorr/data/run2_25ns/Summer15_25nsV6_DATA_Uncertainty_AK4PFchs.txt"); 
  if (!isData) jecUnc = new JetCorrectionUncertainty("CORE/Tools/jetcorr/data/run2_25ns/Summer15_25nsV6_MC_Uncertainty_AK4PFchs.txt"); 

  //Init MVA
  createAndInitMVA("./CORE", true);

  //JEC files -- 25 ns MC
  std::vector<std::string> jetcorr_filenames_25ns_MC_pfL1L2L3;
  jetcorr_filenames_25ns_MC_pfL1L2L3.push_back  ("CORE/Tools/jetcorr/data/run2_25ns/Summer15_25nsV6_MC_L1FastJet_AK4PFchs.txt");
  jetcorr_filenames_25ns_MC_pfL1L2L3.push_back  ("CORE/Tools/jetcorr/data/run2_25ns/Summer15_25nsV6_MC_L2Relative_AK4PFchs.txt");
  jetcorr_filenames_25ns_MC_pfL1L2L3.push_back  ("CORE/Tools/jetcorr/data/run2_25ns/Summer15_25nsV6_MC_L3Absolute_AK4PFchs.txt");

  //JEC files -- 25 ns DATA
  std::vector<std::string> jetcorr_filenames_25ns_DATA_pfL1L2L3;
  jetcorr_filenames_25ns_DATA_pfL1L2L3.push_back("CORE/Tools/jetcorr/data/run2_25ns/Summer15_25nsV6_DATA_L1FastJet_AK4PFchs.txt");
  jetcorr_filenames_25ns_DATA_pfL1L2L3.push_back("CORE/Tools/jetcorr/data/run2_25ns/Summer15_25nsV6_DATA_L2Relative_AK4PFchs.txt");
  jetcorr_filenames_25ns_DATA_pfL1L2L3.push_back("CORE/Tools/jetcorr/data/run2_25ns/Summer15_25nsV6_DATA_L3Absolute_AK4PFchs.txt");
  jetcorr_filenames_25ns_DATA_pfL1L2L3.push_back("CORE/Tools/jetcorr/data/run2_25ns/Summer15_25nsV6_DATA_L2L3Residual_AK4PFchs.txt");

  //JECs
  std::vector<std::string> filenames;
  if ( isData) filenames = jetcorr_filenames_25ns_DATA_pfL1L2L3; 
  if (!isData) filenames = jetcorr_filenames_25ns_MC_pfL1L2L3;
  FactorizedJetCorrector *jetCorrAG;
  jetCorrAG = makeJetCorrector(filenames);

  //Histograms for cross-section calculation
  struct csErr_info_t { TH1F* cs; float cs_scale_up; float cs_scale_dn; float cs_pdf[102]; TH1F* results; int nEntries; int mGluino; int mLSP;}; 
  vector <csErr_info_t> csErr_info_v; 

  //Event Loop
  for(unsigned int eventAG = 0; eventAG < nEvents; eventAG++){
 
    //Get Event Content
    cms3.GetEntry(eventAG);
    nEventsTotal++;

    //See if mass point exists already
    int idx = -1;
    if (isSignal){
      int mGluino = tas::sparm_values().at(0);
      int mLSP = tas::sparm_values().at(1);
      for (unsigned int i = 0; i < csErr_info_v.size(); i++){
        if (mGluino == csErr_info_v[i].mGluino && mLSP == csErr_info_v[i].mLSP){ idx = i; break; }
      }
      if (idx < 0){
        csErr_info_t csErr; 
        csErr.cs = new TH1F(Form("cs_%i_%i", mGluino, mLSP), Form("cs_%i_%i", mGluino, mLSP), 1, 0, 1);
        csErr.cs->Sumw2(); 
        csErr.cs_scale_up = 0;
        csErr.cs_scale_dn = 0;
        for (int i = 0; i < 102; i++) csErr.cs_pdf[i] = 0; 
        csErr.results = new TH1F(Form("csErr_%i_%i", mGluino, mLSP), Form("csErr_%i_%i", mGluino, mLSP), 106, 0, 106); 
        csErr.results->Sumw2(); 
        csErr.nEntries = 0; 
        csErr.mGluino = mGluino; 
        csErr.mLSP = mLSP; 
        idx = csErr_info_v.size(); 
        csErr_info_v.push_back(csErr); 
      } 
    }

    //If data, check good run list
    if (tas::evt_isRealData() && !goodrun(tas::evt_run(), tas::evt_lumiBlock())) continue; 

    //Progress bar
    CMS3::progress(nEventsTotal, nEvents);

    csErr_t csErr = mylooper->ProcessBaby(name, jetCorrAG, jecUnc, file, isSignal); 

    //c-s error variables
    if (isSignal){
      csErr_info_v[idx].nEntries++; 
      csErr_info_v[idx].cs->Fill(0.5, csErr.cs_scale_no);  
      csErr_info_v[idx].cs_scale_up += csErr.cs_scale_up;
      csErr_info_v[idx].cs_scale_dn += csErr.cs_scale_dn;
      for (unsigned int i = 0; i < 102; i++) csErr_info_v[idx].cs_pdf[i] += csErr.cs_pdf[i];
    }

  }//event loop 

  if (isSignal){
    for (unsigned int j = 0; j < csErr_info_v.size(); j++){
      //c-s value
      //float cs_int = csErr_info_v[j].cs->Integral();
      //float cs_value = 1000*cs_int; 
     
      //c-s PDF error
      //TH1F* cs_pdf_hist = new TH1F("cs_pdf_hist", "cs_pdf_hist", 10000, 0, 1000); 
      //for (int i = 0; i < 100; i++){
      //  cs_pdf_hist->Fill( 1000*csErr_info_v[j].cs_pdf[i]/csErr_info_v[j].cs->GetEntries() ); 
      //}
      //float cs_pdf_error = cs_pdf_hist->GetRMS(); 

      //c-s error results
      csErr_info_v[j].results->SetBinContent(1, csErr_info_v[j].nEntries);
      csErr_info_v[j].results->SetBinContent(2, csErr_info_v[j].cs->Integral()); 
      csErr_info_v[j].results->SetBinError(2, csErr_info_v[j].cs->GetBinError(1)); 
      csErr_info_v[j].results->SetBinContent(3, csErr_info_v[j].cs_scale_up); 
      csErr_info_v[j].results->SetBinContent(4, csErr_info_v[j].cs_scale_dn); 
      for (unsigned int i = 5; i <= 106; i++) csErr_info_v[j].results->SetBinContent(i, csErr_info_v[j].cs_pdf[i-5]);

      //csErr_info_v[j].results->Fill(1.5, 100*csErr_info_v[j].cs->GetBinError(1)/cs_int    );
      //csErr_info_v[j].results->Fill(2.5, 100*(csErr_info_v[j].cs_scale_dn - cs_int)/cs_int);
      //csErr_info_v[j].results->Fill(3.5,-100*(csErr_info_v[j].cs_scale_up - cs_int)/cs_int);
      //csErr_info_v[j].results->Fill(4.5, 100*cs_pdf_error/cs_value                        ); 
      //csErr_info_v[j].results->Fill(5.5,-100*(csErr_info_v[j].cs_pdf[100] - cs_int)/cs_int);
      //csErr_info_v[j].results->Fill(6.5, 100*(csErr_info_v[j].cs_pdf[101] - cs_int)/cs_int);
      //csErr_info_v[j].results->Fill(9.5, csErr_info_v[j].nEntries                         );
    }
  }

  //Delete Chain
  mylooper->CloseBabyNtuple();

  //Open the baby file again
  TFile* BabyFile = new TFile(Form("%s_%i.root", shortname.c_str(), file), "UPDATE");
  BabyFile->cd();
  for (unsigned int j = 0; j < csErr_info_v.size(); j++){
    csErr_info_v[j].results->Write(); 
  }

  return 0;

}
